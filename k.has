/ Stack Instruction Set Horizontal Microcode  k.has
/***************************************************************/
/     Fetch instruction and increment pc register               /
/***************************************************************/
fetch:      mar = pc; pc = pc + 1;
            rd;                   
            ir = mdr;
/***************************************************************/
/           Decode opcode                                       /
/***************************************************************/
            dc = ir; if(s) goto L1;
L0:         dc = left(dc); if (s) goto L01; 
L00:        dc = left(dc); if (s) goto L001; 
L000:       dc = left(dc); if (s) goto L0001; 
            goto L0000;
L1:         dc = left(dc); if (s) goto L11; 
L10:        dc = left(dc); if (s) goto L101; 
L100:       dc = left(dc); if (s) goto L9; 
            goto L8;
L01:        dc = left(dc); if (s) goto L011; 
L010:       dc = left(dc); if (s) goto L5; 
            goto L4;          
L11:        dc = left(dc); if (s) goto L111; 
L110:       dc = left(dc); if (s) goto LD; 
            goto LC;
L001:       dc = left(dc); if (s) goto L3; 
            goto L2;
L011:       dc = left(dc); if (s) goto L7; 
            goto L6;
L101:       dc = left(dc); if (s) goto LB; 
            goto LA;
L111:       dc = left(dc); if (s) goto LF; 
            goto LE;
LF:         dc = left(dc); if (s) goto LF_1; 
LF_0:       dc = left(dc); if (s) goto LF_01; 
LF_00:      dc = left(dc); if (s) goto LF_001; 
LF_000:     dc = left(dc); if (s) goto LF_0001;
            goto LF_0000;   
LF_1:       dc = left(dc); if (s) goto LF_11; 
LF_10:      dc = left(dc); if (s) goto LF_101; 
LF_100:     dc = left(dc); if (s) goto LF_9;
            goto LF_8;
LF_01:      dc = left(dc); if (s) goto LF_011; 
LF_010:     dc = left(dc); if (s) goto LF_5;
            goto LF_4;
LF_11:      dc = left(dc); if (s) goto LF_111; 
LF_110:     dc = left(dc); if (s) goto LF_D;
            goto LF_C;
LF_001:     dc = left(dc); if (s) goto LF_3;
            goto LF_2;
LF_011:     dc = left(dc); if (s) goto LF_7;
            goto LF_6;
LF_101:     dc = left(dc); if (s) goto LF_B;
            goto LF_A;
LF_111:     dc = left(dc); if (s) goto LF_F;
            goto LF_E;
LF_F:       dc = left(dc); if (s) goto LF_F_1;
LF_F_0:     dc = left(dc); if (s) goto LF_F_01;
LF_F_00:    dc = left(dc); if (s) goto LF_F_001;
LF_F_000:   dc = left(dc); if (s) goto LF_F_0001;
            goto LF_F_0000;
LF_F_1:     dc = left(dc); if (s) goto LF_F_11
LF_F_10:    dc = left(dc); if (s) goto LF_F_101;
LF_F_100:   dc = left(dc); if (s) goto LF_F_9;
            goto LF_F_8;
LF_F_01:    dc = left(dc); if (s) goto LF_F_011;
LF_F_010:   dc = left(dc); if (s) goto LF_F_5;
            goto LF_F_4;
LF_F_11:    dc = left(dc); if (s) goto LF_F_111
LF_F_110:   dc = left(dc); if (s) goto LF_F_D;
            goto LF_F_C;
LF_F_001:   dc = left(dc); if (s) goto LF_F_3;
            goto LF_F_2;
LF_F_011:   dc = left(dc); if (s) goto LF_F_7;
            goto LF_F_6;
LF_F_101:   dc = left(dc); if (s) goto LF_F_B;
            goto LF_F_A;
LF_F_111:   dc = left(dc); if (s) goto LF_F_F;
            goto LF_F_E;
LF_F_F:     dc = left(dc); if (s) goto fetch;
LF_F_F_0:   dc = left(dc); if (s) goto LF_F_F_01;
LF_F_F_00:  dc = left(dc); if (s) goto LF_F_F_001;
LF_F_F_000: dc = left(dc); if (s) goto LF_F_F_0001;
            goto LF_F_F_0000;
LF_F_F_001: dc = left(dc); if (s) goto LF_F_F_3
            goto LF_F_F_2; 
LF_F_F_01:  dc = left(dc); if (s) goto fetch;
LF_F_F_010: dc = left(dc); if (s) goto fetch;
            goto LF_F_F_4;
L0000:  /-------------------------- P (correct)----------------------------
          mar = ir;
          rd;
          sp = sp - 1;
          mar = sp;
          wr; goto fetch;
L0001:  /-------------------------- PC (correct)----------------------------
            mdr = ir & xmask; 
            sp = sp - 1;
            mar = sp;
            wr;  goto fetch;
L2:   /-------------------------- PR (correct)--------------------------
            temp = ir & xmask;
            temp = bp + temp;    
            mar = temp;
            rd;
            sp = sp - 1; 
            mar = sp;
            wr; goto fetch;
L3: /-------------------------- CORA (correct) --------------------------
            mdr = ir & xmask;
            mdr = bp + mdr;
            sp = sp - 1;
            mar = sp;
            wr; goto fetch;
L4: /-------------------------- ASPC (correct) -------------------------- 
            temp = ir & xmask;
            temp = sp + temp;
            sp = temp; goto fetch;
L5:   /-------------------------- CALL -------------------------- 
            sp = sp - 1;
            mar = sp; mdr = pc;
            wr;
            pc = ir & xmask; goto fetch;
L6:   /-------------------------- JA (correct)-------------------------- 
            pc = ir & xmask; goto fetch;
L7:   /-------------------------- JCNT ---------------------------- 
                  ct = ct - 1;
                  if(z) goto dojn1;
                  goto fetch;
dojn1:            pc = ir & xmask; goto fetch;
L8:     /------------------------- JP  ----------------------
              mar  = sp; sp = sp + 1;
              rd; if (z) goto fetch; 
              goto n; 
n:                rd; if (s) goto fetch;  
              goto dojp; 
dojp:           pc = ir & xmask; goto fetch;
L9:         /------------------------- JN ----------------------- 
                  mar  = sp; sp = sp + 1;
                  rd; 
                  0 = temp; if(s) goto dojn;
                  goto fetch;
dojn:             pc = ir & xmask; goto fetch;
LA:         /------------------------- JZ ---------------------
                mar = sp; sp = sp + 1;
                rd; 
                0=temp; if (z) goto dojz;
                goto fetch;
dojz:           pc = ir & xmask; goto fetch; 
LB:         /------------------------- JNZ ----------------------- 
                  mar = sp; sp = sp + 1;
                  rd; 
                  0=temp; if (z) goto fetch;
                  pc = ir & xmask; goto fetch;
LC:         /------------------------- JODD -----------------------
               mar = sp; sp = sp + 1;
               goto fetch;
LD:         /------------------------- JZON ----------------------
                mar = sp; sp = sp + 1;
                rd; if (z) goto fetch;
                pc = ir & xmask; goto fetch;
LE:         /------------------------- JZOP --------------------- 
                  mar = sp; sp = sp + 1;
                  rd; if(s) goto fetch;
                  pc = ir & xmask; goto fetch;
LF_0000:    /-------------------------  RET (not correct)---------------------- (✓)
                  mar = sp;
                  rd;
                  sp = sp + 1;
                  pc = mdr; goto fetch;
LF_0001:    /------------------------- ADD (correct)---------------------- (✓)
            mar = sp; 
            rd;
            temp = mdr;
            sp = sp + 1;
            mar = sp;
            rd;
            mdr = temp + mdr;
            mar = sp;
            wr; goto fetch; 
LF_2:       /------------------------- SUB (correct) ----------------------
            mar = sp;
            sp = sp + 1;
            rd;
            temp = mdr;
            mar = sp;
            rd;
            mdr = mdr - temp;
            wr; goto fetch;
LF_3:       /------------------------- STAV ---------------------(Jabari Dash)
                mar = sp;  sp = sp + 1;
                rd;
                temp = mdr;                     / temp = mem[sp++]; Temporarily store tha data value
                
                mar = sp; sp = sp + 1;
                rd;
                mar = mdr;                      / Get address to write out into the mar
                
                mdr = temp;                     / Put data back into mdr to write out
                 
                wr;                             / write data from mdr to address in mar
                
                goto fetch;
LF_4:       /------------------------- STVA ----------------------
                mdr = sp;
                sp = sp + 1;
                mar = sp;
                sp = sp + 1;
                wr;
                goto fetch;
LF_5:       /-------------------------  LOAD (correct) ---------------------
                mar = sp;
                rd;
                mar = mdr;
                rd;
                mar = sp;
                wr; goto fetch;
LF_6:       /------------------------- ADDC ---------------------   
                mar = ir; 
                rd; 
                temp = mdr;
                mar = sp;
                rd;
                temp = temp + mdr;
                mdr = temp;
                wr; goto fetch
LF_7:       /------------------------- SUBC ---------------------
                mar = ir; 
                rd; 
                temp = mdr;
                mar = sp;
                rd;
                temp = temp - mdr;
                mdr = temp;
                wr; goto fetch
LF_8:       /------------------------- DUPE (correct)----------------------
                mar = sp;
                rd;
                temp = mdr;
                mar = sp; sp = sp - 1;
                rd;
                mdr = temp; mar = sp;
                wr; goto fetch;
LF_9:       /-------------------------- ESBA  ---------------------- (✓)
            mdr = bp; 
            sp = sp - 1;
            mar = sp;
            wr;
            bp = sp & xmask; 
            goto fetch;
LF_A:       /-------------------------- REBA  --------------------- (✓)
            sp = bp;
            mar = sp;
            rd;
            bp = mdr;
            sp = sp + 1; goto fetch;
LF_B:       /--------------------------- ZESP (correct) ---------------------
                sp = 0; goto fetch;
LF_C:       /----------------------------- SCMP ----------------------
               mar = sp;
            sp = sp + 1;
            rd;
            temp = mdr;
            mar = sp;
            rd;
            // temp1 = temp , temp2 = mdr
            0 = mdr & temp; if (s) goto bothneg;
            0 = mdr; if (s) goto pushnegone;
            0 = temp; if (s) goto pushone;
            mdr = mdr - temp; if (s) goto pushnegone;
            0 = mdr; if (z) goto pushzero;
            goto pushone;
            bothneg:      
                  mdr = mdr - temp; if (s) goto pushnegone;
                  0 = mdr; if (z) goto pushzero;
                  goto pushone;
            pushnegone:
                  mdr = 0 - 1;
                  wr; goto fetch;
            pushzero:
                  mdr = 0;
                  wr; goto fetch;
            pushone:
                  mdr = 1;
                  wr; goto fetch;
LF_D:       /----------------------------- UCMP -----------------------
              temp1 = sp;
              sp = sp+1;
              rd;
              /temp
              goto fetch;
LF_E:       /------------------------------ REV ----------------------
              mar = sp; 
            sp = sp + 1;
            rd;
            temp = mdr;
            mar = sp;
            rd
            temp2 = mdr;
            mdr = temp;
            wr;
            sp = sp - 1;
            mdr = temp2;
            mar = sp;
            wr; 
            goto fetch; 
LF_F_0000:  /----------------------------- SHLL -----------------------
            mar = sp;
            rd;
            temp = ir & zmask;
            loopstart:
                        0 = temp; if (z) goto pushfetch;
                        mdr = left(mdr);
                        temp = temp - 1;
                        goto loopstart;
            pushfetch:
                        wr;
                        goto fetch;
LF_F_0001:  /------------------------------- SHRL ---------------------
            mar = sp;
            rd;
            temp = ir & zmask;
            shiftloopstart:
                        0 = temp; if (z) goto pushfetcher;
                        mdr = right(mdr);
                        temp = temp - 1;
                        goto shiftloopstart;
            pushfetcher:
                        wr;
                        goto fetch;
LF_F_2:     /-------------------------------- SHRA --------------------
            mar = sp;
            rd;
            temp = ir & zmask;
            temp2 = 0 - 1;
            temp2 = right(temp2);
            temp2  = ~temp2;
            0 = mdr; if (s) goto negshraloop;
            posshraloop:
                        0 = temp; if (z) goto shrapushfetcher;
                        mdr = right(mdr);
                        temp = temp - 1;
                        goto posshraloop;
            negshraloop:
                        0 = temp; if (z) goto shrapushfetcher;
                        mdr = right(mdr);
                        mdr = mdr + temp2;
                        temp = temp - 1;
                        goto negshraloop;
            shrapushfetcher:
                        wr;
                        goto fetch;
LF_F_3:     /------------------------------- M ---------------------
            temp2 = 0;
            mar = sp;
            rd;
            temp = mdr;
            sp = sp + 1;
            mar = sp;
            rd;
            loop: 
                  0 = mdr; if (z) goto done;
                  0 = mdr & 1: if (z) goto continue;
                  temp2 = temp2 + temp;
                  mdr = right(mdr);
                  temp = left(temp);
                  goto loop;
            continue:
                  mdr = right(mdr);
                  temp = left(temp);
                  goto loop;
            done:
                  mar = sp;
                  mdr = temp2;
                  wr; goto fetch;
LF_F_4:     /------------------------------- MULTI --------------------- (✓)
            // INITIAL GETS -------
            temp3 = 1;
            mar = sp;
            rd; 
            temp = mdr;
            sp = sp + 1;
            mar = sp;
            rd;
            temp2 = mdr;
            mdr = 0;
            //-----------
            // CHECKING FOR NEGATIVES ------
            0 = temp; if (z) goto zeromultiplier;
            0 = temp2; if (z) goto zeromultiplier;
            0 = temp & mdr; if (s) goto multi;
            0 = temp; if (s) goto tnegfound;
            0 = temp; if (s) goto mnegfound;
            //----------------------------------
            // the temp3 register is used as a flag to see if there was a  
            // negative found
// MAIN LOOP --------
multi:
            mdr = mdr + temp2;
            temp = temp - 1;
            0 = temp; if (z) goto pospushfetch;
            goto multi;
// -------------------
// PUSH TO STACK------
pospushfetch:
            0 = temp3; if (z) goto negpushfetch;
            wr; goto fetch;
negpushfetch:
            mdr = ~mdr
            mdr = mdr + 1;
            wr; goto fetch;
//--------------------------
// NEGATIVE TO POSETIVES----------
mnegfound:
            mdr = ~mdr;
            mdr = mdr + 1;
            temp3 = temp3 - 1; goto multi;
tnegfound:
            temp = ~temp;
            temp = temp + 1;
            temp3 = temp3 - 1; goto multi;
//------------------------------
zeromultiplier:
            mdr = 0;
            wr; goto fetch;
LF_F_5:     /------------------------------- DIV --------------------- (✓)
                  temp3 = 0;
                  mar = sp;
                  rd;
                  temp = mdr;
                  sp = sp + 1;
                  temp2 = sp;
                  0 = temp; if (z) goto spPush;
                  mar = temp2;
                  rd;
                  0 = temp & mdr; if (s) goto pposout; //if both signs are negative
                  0 = mdr; if (s) goto negout;
                  0 = temp; if (s) goto negout;
                  goto posout;
            pposout:
                  temp = ~temp;
                  mdr = ~mdr;
                  temp = temp + 1;
                  mdr = mdr + 1;
            posout:
                  mdr = mdr - temp; if (s) goto posformat;
                  temp3 = temp3 + 1;
                  0 = mdr; if (z) goto posformat;
                  goto posout;
            negout:
                  0 = temp; if (s) goto tflipper;
                  0 = mdr; if (s) goto mflipper;
            negfinish:
                  mdr = mdr - temp; if (s) goto negformat;
                  temp3 = temp3 + 1;
                  0 = mdr; if (z) goto negformat;
                  goto negfinish;
                  tflipper:
                        temp = ~temp;
                        temp = temp + 1; goto negfinish;
                  mflipper:
                        mdr = ~mdr;
                        mdr = mdr + 1; goto negfinish;
            spPush:
                  sp = sp - 1;
                  mdr = temp2;
                  mar = sp;
                  wr; goto fetch;
            negformat:
            temp3 = ~temp3;
            temp3 = temp3 + 1;
            mar = sp;
            mdr = temp3;
            wr; goto fetch;
            posformat:
            mdr = temp3;
            mar = sp;
            wr; goto fetch;
LF_F_6:     /------------------------------- REM --------------------(?)
            mar = sp; sp = sp + 1;
            rd;
            temp = mdr;         
            
            mar = sp;
            rd;
            temp1 = mdr;        
            
            0 = temp; if (z) goto zero;
            0 = temp; if (s) goto negDen
            
            0 = temp1; if (z) goto zero
            0 = temp1; if (s) goto negNum
            
            temp2 = temp1; 
            
            negNum:
              temp1 = ~temp1;
              goto remloop;
            
            negDen:
              mar = sp; sp = sp - 1;
              mdr = 0;
              wr;
              goto fetch; 
            zero:
              mar = sp; sp = sp - 1;
              mdr = ct;
              wr;
              goto fetch; 
              
            remloop:
              0 = temp1; if (s) goto pushRem
              temp1 = temp1 - temp; 
              goto remloop
              
            pushRem:
              temp = temp * temp1
              temp = temp1 - temp
              mar = sp;
              mdr = temp;
              wr;
              goto fetch;   
              
LF_F_7:     /------------------------------- ADDY ---------------------
                temp = sp;
                sp = sp + 1;
                rd;
                temp = mdr;
                /carry = cy;
                mar = sp;
                rd;
                mdr = mdr + temp;
                /mdr = mdr + carry; cy = carry; 
                goto fetch; 
LF_F_8:     /------------------------------- OR (correct) --------------------- (Brandon)
                
                mar=sp;                  / ready top number
                rd;                      / put it in mdr
                temp = mdr;              / A
                temp = ~temp;            / !A
                
                sp = sp + 1;             / put sp pointing to bottom number
                mar = sp;                / ready bottom number
                rd;                      / put it in mdr
                temp1 = mdr;             / B
                temp1 = ~temp1;          / !B
                
                temp2 = temp & temp1;    / !A & !B
                temp2 = ~temp2;          / !(!A & !B) == A + B == A OR B 
                
                mdr = temp2;             /
                wr; goto fetch;          / write to sp
LF_F_9:     /------------------------------- XOR ---------------------(Jabari Dash)
                / IMPLEMENT DE MORGAN'S LAW
                
                mar = sp; sp = sp + 1;
                rd;
                temp = mdr;                     / Get operand B
                
                mar = sp;
                rd;
                temp1 = mdr;                    / Get operand A
                
                temp2 = temp; 
                temp3 = temp1;
                temp3 = ~temp3;
                temp2 = temp2 & temp3;
                temp2 = ~temp2;
                mdr = temp2;
                wr;                             / mem[sp] = ~(A & ~B); Left side of De Morgan's Law
                
                temp2 = temp;
                temp3 = temp1;
                temp2 = ~temp2;
                temp2 = temp2 & temp3;
                temp2 = ~temp2;                 / mem[sp] = ~(~A & B); Right sie od De Morgan's Law      
                
                mar = sp;
                rd;
                temp3 = mdr;
                temp2 = temp2 & temp3;          / ~(A & ~B) & ~(~A & B); AND Both sides
                
                temp2 = ~temp2;
                mdr = temp2;
                wr;                             / mem[sp] = ~[~(A & ~B) & ~(~A & B)]; NEGATE the result
                
                goto fetch;
LF_F_A:     /--------------------------------- AND -------------------
                temp = sp;
                sp = sp + 1;
                rd; 
                temp = mdr;
                temp2 = sp;
                rd;
                temp2 = mdr;
                temp3 = temp & temp2;
                mar = sp;
                mdr = temp3
                wr; goto fetch;
LF_F_B:     /--------------------------------- FLIP -------------------
                temp = sp;
                rd;
                mdr = ~mdr;
                wr; 
                goto fetch
LF_F_C:     /----------------------------------- CALI -----------------
                /temp = sp;
                /rd;
                /mar = sp;
                /mdr = pc;
                /wr;
                /pc = temp; 
                /goto fetch; 
LF_F_D:     /--------------------------- SECT -------------------------(Jabari Dash)
                mar = sp; sp = sp + 1;
                rd;
                ct = mdr;
                
                goto fetch; 
LF_F_E:     /---------------------------- ROT ------------------------
                
                mar = sp;
                rd;
                temp = mdr;     / A
                sp = sp + 1;
                
                mar = sp;
                rd;
                temp1 = mdr;    / B
                sp = sp + 1;
                
                mar = sp;
                rd; 
                temp2 = mdr;    / C

                mar = sp;
                mdr = temp;
                wr;             / write A where C was 
                
                sp = sp - 1;
                mar = sp;
                mdr = temp2;    / write C where B was
                wr;
                
                sp = sp - 1;
                mar = sp;
                mdr = temp1;    /write B where A was
                sp = sp + 1;
                
                wr; goto fetch;

LF_F_F_0000:/----------------------------- PSP (correct)-----------------------
                /temp = sp;      /"temp = sp;"
                /sp = sp - 1;    /decrement sp
                /mar = sp; mdr = temp;   /"mem[--sp] = temp;" / memory address = sp; mdr = old sp; ;split this into two lines if it doesn't work
                /wr; goto fetch;
LF_F_F_0001:/------------------------------ BPBP (correct) ----------------------
                /mar = bp;
                /rd;
                /bp = mdr; 
                /goto fetch;
LF_F_F_2:   /------------------------------- POBP (correct) -----------
                /mar = sp; sp = sp + 1;  
                /rd;
                /bp = mdr; 
                /goto fetch; 
LF_F_F_3:   /--------------------------------- PBP (correct) ----------
                /sp = sp -1;
                /mar = sp; 
                /mdr = bp; 
                /wr; goto fetch
LF_F_F_4:   /-------------------------------- BCPY (correct) --------------------
                /temp1 = sp; sp = sp + 1;
          /temp2 = sp; sp = sp + 1;
      /check:  0 = ct; if (z) goto fetch;
        / temp1 = temp1 + 1;
          /temp2 = temp2 + 1;
          
          /mar = temp1;
          /rd;
          /mar = temp2;
          /wr;
          /ct = ct - 1;
          /goto check;