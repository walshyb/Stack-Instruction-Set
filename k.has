/ Stack Instruction Set - k.has

/***************************************************************/
/     Fetch instruction and increment pc register               /
/***************************************************************/
fetch:      mar = pc; pc = pc + 1;
            rd;                   
            ir = mdr;
/***************************************************************/
/           Decode opcode                                       /
/***************************************************************/
            dc = ir; if(s) goto L1;
L0:         dc = left(dc); if (s) goto L01; 
L00:        dc = left(dc); if (s) goto L001; 
L000:       dc = left(dc); if (s) goto L0001; 
            goto L0000;
L1:         dc = left(dc); if (s) goto L11; 
L10:        dc = left(dc); if (s) goto L101; 
L100:       dc = left(dc); if (s) goto L9; 
            goto L8;
L01:        dc = left(dc); if (s) goto L011; 
L010:       dc = left(dc); if (s) goto L5; 
            goto L4;          
L11:        dc = left(dc); if (s) goto L111; 
L110:       dc = left(dc); if (s) goto LD; 
            goto LC;
L001:       dc = left(dc); if (s) goto L3; 
            goto L2;
L011:       dc = left(dc); if (s) goto L7; 
            goto L6;
L101:       dc = left(dc); if (s) goto LB; 
            goto LA;
L111:       dc = left(dc); if (s) goto LF; 
            goto LE;
LF:         dc = left(dc); if (s) goto LF_1; 
LF_0:       dc = left(dc); if (s) goto LF_01; 
LF_00:      dc = left(dc); if (s) goto LF_001; 
LF_000:     dc = left(dc); if (s) goto LF_0001;
            goto LF_0000;   
LF_1:       dc = left(dc); if (s) goto LF_11; 
LF_10:      dc = left(dc); if (s) goto LF_101; 
LF_100:     dc = left(dc); if (s) goto LF_9;
            goto LF_8;
LF_01:      dc = left(dc); if (s) goto LF_011; 
LF_010:     dc = left(dc); if (s) goto LF_5;
            goto LF_4;
LF_11:      dc = left(dc); if (s) goto LF_111; 
LF_110:     dc = left(dc); if (s) goto LF_D;
            goto LF_C;
LF_001:     dc = left(dc); if (s) goto LF_3;
            goto LF_2;
LF_011:     dc = left(dc); if (s) goto LF_7;
            goto LF_6;
LF_101:     dc = left(dc); if (s) goto LF_B;
            goto LF_A;
LF_111:     dc = left(dc); if (s) goto LF_F;
            goto LF_E;
LF_F:       dc = left(dc); if (s) goto LF_F_1;
LF_F_0:     dc = left(dc); if (s) goto LF_F_01;
LF_F_00:    dc = left(dc); if (s) goto LF_F_001;
LF_F_000:   dc = left(dc); if (s) goto LF_F_0001;
            goto LF_F_0000;
LF_F_1:     dc = left(dc); if (s) goto LF_F_11
LF_F_10:    dc = left(dc); if (s) goto LF_F_101;
LF_F_100:   dc = left(dc); if (s) goto LF_F_9;
            goto LF_F_8;
LF_F_01:    dc = left(dc); if (s) goto LF_F_011;
LF_F_010:   dc = left(dc); if (s) goto LF_F_5;
            goto LF_F_4;
LF_F_11:    dc = left(dc); if (s) goto LF_F_111
LF_F_110:   dc = left(dc); if (s) goto LF_F_D;
            goto LF_F_C;
LF_F_001:   dc = left(dc); if (s) goto LF_F_3;
            goto LF_F_2;
LF_F_011:   dc = left(dc); if (s) goto LF_F_7;
            goto LF_F_6;
LF_F_101:   dc = left(dc); if (s) goto LF_F_B;
            goto LF_F_A;
LF_F_111:   dc = left(dc); if (s) goto LF_F_F;
            goto LF_F_E;
LF_F_F:     dc = left(dc); if (s) goto fetch;
LF_F_F_0:   dc = left(dc); if (s) goto LF_F_F_01;
LF_F_F_00:  dc = left(dc); if (s) goto LF_F_F_001;
LF_F_F_000: dc = left(dc); if (s) goto LF_F_F_0001;
            goto LF_F_F_0000;
LF_F_F_001: dc = left(dc); if (s) goto LF_F_F_3
            goto LF_F_F_2; 
LF_F_F_01:  dc = left(dc); if (s) goto fetch;
LF_F_F_010: dc = left(dc); if (s) goto fetch;
            goto LF_F_F_4;
L0000:      /-- P --
            mar = ir;   /address is ir
            rd; sp = sp - 1; /read value from specified address to mdr
            mar = sp;   /mar = sp
            wr; goto fetch; /write value to sp location
L0001:      /-- PC --
            mdr = ir & xmask; /store number in mdr
            sp = sp - 1;    /update sp
            mar = sp;       /location is sp
            wr;  goto fetch;/ write
L2:         /-- PR --
            temp0 = ir & xmask;/get number
            temp0 = temp0 + bp; /add bp to it, store to temp
            mar = temp0;  /use temp as address
            rd;     /read value to mdr from that address
            sp = sp - 1; /update sp
            mar = sp;   /sp is address
            wr; goto fetch; /write value to sp
L3:         /-- CORA --
            mdr = ir & xmask;   /get number
            mdr = bp + mdr;     /add bp
            mdr = mdr & xmask;  /12 bits
            sp = sp - 1;        /update sp
            mar = sp;           /mar is sp
            wr; goto fetch;     /write value to sp
L4:         /-- ASPC -- 
            temp0 = ir & xmask; /get number, store temp
            temp0 = sp + temp0; /add sp to it
            temp0 = temp0 & xmask;/12 bits
            sp = temp0; goto fetch;/update sp
L5:         /-- CALL -- 
            sp = sp - 1;        /increment sp to make 1 space
            mar = sp; mdr = pc; /sp is address, pc in mdr
            wr; /write pc to sp location
            pc = ir & xmask; goto fetch; /pc = specified address
            /now starts jumps galore
L6:         /-- JA -- 
            pc = ir & xmask; goto fetch;
L7:         /-- JCNT -- 
            ct = ct - 1; if (z) goto doct;
            0 = ct;      if (s) goto doct;                
            pc = ir & xmask;    goto fetch;
            doct: 
                goto fetch;
L8:         /-- JP --
            mar = sp; sp = sp + 1;
            rd;
            0 = mdr; if (s)  goto fetcher;
            0 = mdr; if (z)  goto fetcher;
            pc = ir & xmask; goto fetch;
            fetcher: 
                goto fetch;
L9:         /-- JN -- 
            mar = sp; sp = sp + 1;
            rd; 
            0 = mdr; if (s) goto dojn; 
            goto fetch;
            dojn: 
                pc = ir & xmask; goto fetch;
LA:         /-- JZ --
            mar = sp; sp = sp + 1;
            rd;
            0 = mdr; if (z) goto do;
            goto fetch;
            do: 
                pc = ir & xmask; goto fetch;
LB:         /-- JNZ --
            mar = sp; sp = sp + 1;
            rd; 
            0 = mdr; if (z) goto fetch;
            pc = ir & xmask; goto fetch;
LC:         /-- JODD --
            mar = sp; sp = sp + 1;
            rd;
            0 = mdr & 1; if (z) goto founder;
            pc = ir & xmask;
            goto fetch;
            founder:  
                goto fetch;
LD:         /-- JZON --
            mar = sp; sp = sp + 1;
            rd;
            0 = mdr; if (s) goto negfound;
            0 = mdr; if (z) goto negfound;
            goto fetch;
            negfound:    
                pc = ir & xmask; goto fetch;
LE:         /-- JZOP -- 
            mar = sp; sp = sp + 1;
            rd; 
            0 = mdr; if (s) goto fetch;
            pc = ir & xmask; goto fetch; 
            /now end jumps galore
LF_0000:    /--  RET -- 
            mar = sp; sp = sp + 1;  /ready sp 
            rd;                     /read ret @ to mdr      
            pc = mdr; goto fetch;   /update pc
LF_0001:    /-- ADD-- 
            mar = sp;       /ready sp
            rd;             /first value
            temp0 = mdr;    /store in temp
            sp = sp + 1;
            mar = sp;       /ready sp
            rd;             /second value
            mdr = temp0 + mdr;/add them
            mar = sp;       /update location
            wr; goto fetch; /store 
LF_2:       /-- SUB--
            mar = sp; sp = sp + 1;     /ready sp 
            rd;         
            temp0 = mdr;               /store first val
            mar = sp;                  / ready sp of second val
            rd;         
            mdr = mdr - temp0;         /sub second val from first 
            wr; goto fetch;            /write back in loc of second val
LF_3:       /-- STAV --
            mar = sp;  sp = sp + 1;     /ready sp
            rd;                         / put in mdr
            temp0 = mdr;                / temp = mdr
            mar = sp; sp = sp + 1;      / ready new sp
            rd;                         / value in mdr
            mar = mdr;                  / mdr in mar
            mdr = temp0;                / temp value to write in mdr
            wr; goto fetch;             / write  
LF_4:       /-- STVA --
            mar = sp; sp = sp + 1;      / ready sp
            rd;                         / put in mdr
            temp0 = mdr;                / store value in temp
            mar = sp; sp = sp + 1;      / ready new sp
            rd;                         / put value in mdr
            temp1 = mdr;                / store in another temp
            mar = temp0;                / first temp is location
            mdr = temp1;                / second temp is value
            wr; goto fetch;             / write
            
LF_5:       /-- LOAD --
            mar = sp;   /ready sp
            rd;         / put value in mdr
            mar = mdr;  / value is actually an address so put that in mar
            rd;         / get new value and put in mdr
            mar = sp;   / address is sp again
            wr; goto fetch; /write value in mdr
LF_6:       /-- ADDC --   
            cy = 0;     / carry is 0 from start 
            mar = sp;   / ready sp
            rd;         / put value in mdr
            temp0 = ir & ymask; / get input y
            temp2 = mdr + temp0;/ value (mdr) + input
            0 = temp0 & mdr; if (s) goto cy1;  /check
            0 = mdr; if (s) goto cy2;  /check
            0 = temp0; if (s) goto cy2;  /check
            goto end3;
            cy2:
                0 = temp2; if (s) goto end3;
            cy1:    
                cy = 1;
            end3:   
                mdr = temp2;   
                wr; goto fetch;
LF_7:       /-- SUBC -- 
            temp0 = ir & ymask;         / get value 'y'
            mar = sp;
            rd;
            temp1 = mdr;                / get value at sp
            temp2 = temp1 - temp0;      / temp2 = mem[sp] - y;
            mdr = temp2;                / ready temp2 for write
            wr; goto fetch;
LF_8:       /-- DUPE--
            mar = sp;                   / ready sp
            rd;                         / put in mdr
            temp0 = mdr;                / assign to temp
            sp = sp - 1;                / ready new position                 
            mdr = temp0; mar = sp;      / ready sp
            wr; goto fetch;             / write old value
LF_9:       /-- ESBA -- 
            sp = sp - 1;
            mar = sp;
            mdr = bp;
            wr;                         / mem[--sp] = bp; 
            bp = sp & xmask; goto fetch;/ bp = sp12;
LF_A:       /-- REBA --
            sp = bp; mar = sp;          / sp = bp;
            rd; bp = mdr;               / bp = mem[sp++];
            sp = sp + 1; goto fetch;
LF_B:       /-- ZESP --
            sp = 0; goto fetch;
LF_C:       /-- SCMP --
LF_D:       /-- UCMP --
LF_E:       /-- REV --
            mar = sp; sp = sp + 1;      / ready sp
            rd;                         / put in mdr
            temp0 = mdr; mar = sp;      / assign to temp, ready new sp
            rd;                         / put in mdr
            temp2 = mdr;                / assign to temp
            mdr = temp0;
            wr; sp = sp - 1;            / write
            mdr = temp2; mar = sp;      
            wr; goto fetch; 
LF_F_0000:  /-- SHLL --
            mar = sp;
            rd;
            temp0 = ir & zmask;
            loop0:
                0 = temp0; if (z) goto end;
                mdr = left(mdr);
                temp0 = temp0 - 1;
                goto loop0;
            end:
                wr; goto fetch;
LF_F_0001:  /-- SHRL --
            mar = sp;
            rd;
            temp0 = ir & zmask;
            loop1:
                0 = temp0; if (z) goto end1;
                mdr = right(mdr);
                temp0 = temp0 - 1;
                goto loop1;
            end1:
                wr;
                goto fetch;
LF_F_2:     /-- SHRA --
            mar = sp;
            rd;
            temp0 = ir & zmask; 
            temp2 = 0 - 1;
            temp2 = right(temp2);
            temp2  = ~temp2;
            0 = mdr; if (s) goto negloop;
            posloop:
            0 = temp0; if (z) goto end2;
            mdr = right(mdr);
            temp0 = temp0 - 1;
            goto posloop;
            negloop:
            0 = temp0; if (z) goto end2;
            mdr = right(mdr);
            mdr = mdr + temp2;
            temp0 = temp0 - 1;
            goto negloop;
            end2: wr; goto fetch;
LF_F_3:     /-- M --
            temp2 = 0;
            mar = sp;
            rd;
            temp0 = mdr;
            sp = sp + 1;
            mar = sp;
            rd;
            loop: 
              0 = mdr; if (z) goto end4;
              0 = mdr & 1: if (z) goto next;
              temp2 = temp2 + temp0;
              mdr = right(mdr);
              temp0 = left(temp0);
              goto loop;
            next:
              mdr = right(mdr);
              temp0 = left(temp0);
              goto loop;
            end4:
              mar = sp;
              mdr = temp2;
              wr; goto fetch;
LF_F_4:     /-- MULT --
            mar = sp;       / ready sp
            rd;             / put value in mdr
            temp0 = mdr;    / assign to temp
            sp = sp + 1;    / ready sp 
            mar = sp;       / ready next value
            rd;             / put in mdr
            mdr = temp0 * mdr;  / multiply two numbers
            mar = sp;           / ready address to store
            wr; goto fetch;     / write
LF_F_5:     /-- DIV -- 
LF_F_6:     /-- REM --
LF_F_7:     /-- ADDY --          
LF_F_8:     /-- OR -- 
            mar=sp;                  / ready top number
            rd;                      / put it in mdr
            temp0 = mdr;             / A
            temp0 = ~temp0;          / !A
            
            sp = sp + 1;             / put sp pointing to bottom number
            mar = sp;                / ready bottom number
            rd;                      / put it in mdr
            temp1 = mdr;             / B
            temp1 = ~temp1;          / !B
            
            temp2 = temp0 & temp1;   / !A & !B
            temp2 = ~temp2;          / !(!A & !B) == A + B == A OR B 
            
            mdr = temp2;             /
            wr; goto fetch;          / write to sp      
LF_F_9:     /-- XOR--            
            mar = sp; sp = sp + 1;
            rd;
            temp0 = mdr;                    / B
            
            mar = sp;
            rd;
            temp1 = mdr;                    / A
            
            temp2 = ~temp1;
            temp3 = temp0 & temp2;
            mdr = ~temp3;
            wr;                             / !(B & !A)
            
            temp3 = ~temp0;
            temp3 = temp3 & temp1;
            temp3 = ~temp3;                 / !(!B & A)      
            
            mar = sp;
            rd;
            temp2 = mdr;
            temp3 = temp3 & temp2;          / !(B & !A) & !(!B & A) 
            
            mdr = ~temp3;
            wr; goto fetch;                 / !(!(B & !A) & !(!B & A))
            
LF_F_A:     /-- AND --
            mar = sp;        / ready sp
            rd;              / put value in mdr
            temp0 = mdr;     / assign to temp
            sp = sp + 1;     / point to next operand
            
            mar = sp;        / ready 
            rd;              / put in mdr
            temp1 = mdr;     / assign to temp

            temp2 = temp0 & temp1;  / and values
            mar = sp;               / prepare to address (sp) to write
            mdr = temp2;            / prepare value to write
            wr; goto fetch;         / write
LF_F_B:     /-- FLIP -- 
            mar = sp;       / ready value at sp
            rd;             / put it in mdr
            mdr = ~mdr;     / flip mdr
            wr; goto fetch  / put back in sp
LF_F_C:     /-- CALI --
            mar = sp;       / ready value at sp
            rd;             / put in mdr
            temp0 = mdr;    / store in temp
            mdr = pc;       
            wr;             / write pc
            pc = temp0 & xmask; goto fetch;    /
LF_F_D:     /-- SECT --
            mar = sp; sp = sp + 1;      / ready value at sp 
            rd;                         / put it in mdr
            ct = mdr; goto fetch;       / put it in ct
LF_F_E:     /-- ROT -- 
            mar = sp;
            rd;
            temp0 = mdr;    / A
            sp = sp + 1;
            
            mar = sp;
            rd;
            temp1 = mdr;    / B
            sp = sp + 1;
            
            mar = sp;
            rd; 
            temp2 = mdr;    / C

            mar = sp;
            mdr = temp0;
            wr;             / write A where C was 
            
            sp = sp - 1;
            mar = sp;
            mdr = temp2;    / write C where B was
            wr;
            
            sp = sp - 1;
            mar = sp;
            mdr = temp1;    / write B where A was

            wr; goto fetch;

LF_F_F_0000:/-- PSP-- 
            temp0 = sp;              / "temp = sp;"
            sp = sp - 1;             / decrement sp
            mar = sp; mdr = temp0;   / "mem[--sp] = temp;" / memory address = sp; mdr = old sp; ;split this into two lines if it doesn''t work
            wr; goto fetch;
LF_F_F_0001:/-- BPBP --
            mar = bp;  / address = bp              
            rd;        / read value at bp put in mdr
            bp = mdr; goto fetch;   / bp = value at bp
LF_F_F_2:   /-- POBP --
            mar = sp; sp = sp + 1;   /ready sp  
            rd;         / read value and put in mdr
            bp = mdr; goto fetch;   /assign value to bp
LF_F_F_3:   /-- PBP --
            sp = sp -1;     / up 1
            mar = sp;       / ready sp
            mdr = bp;       / assign value to be written the bp
            wr; goto fetch; / write
LF_F_F_4:   /-- BCPY --
            mar = sp; sp = sp + 1;  /ready sp
            rd;                     /get value
            temp0 = mdr; mar = sp;  /assign to temp, ready new sp
            rd; sp = sp + 1;        / put in mdr, ready new sp
            temp2 = mdr;            / assign to temp
            bcpy: 0 = ct; if (z) goto fetch;
            mar = temp0;            / address is temp
            rd;                     / put value in mdr
            mar = temp2;            / address is next temp
            wr; ct = ct - 1;        / write value, update counter
            temp0 = temp0 + 1;      / update temps
            temp2 = temp2 + 1; goto bcpy;